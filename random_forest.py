# -*- coding: utf-8 -*-
"""
Initial random forest
@author: ucabhmf
"""

import pandas as pd
import numpy as np
from sklearn.cross_validation import train_test_split
from sklearn.grid_search import GridSearchCV
import sklearn.metrics  as metrics
from sklearn.svm import l1_min_c
import matplotlib.pyplot as plt
import math as ma
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
from sklearn.metrics import auc
from sklearn.metrics import precision_recall_fscore_support 
from sklearn import grid_search
from sklearn.manifold import TSNE
from matplotlib  import cm

import load_data as ld
import load_data_mi as ldmi


np.random.seed(10)



##########################################################################
############ Imputed data analysis ############
##########################################################################

############################ 1 ############################

pred_acc1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

f1_vals1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
pre_vals1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
          
rec_vals1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     

pred_acc_average1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals_average1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
f1_vals_average1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}     

pre_vals_average1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

rec_vals_average1 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

train_data = ldmi.train11
train_dataX = ldmi.train11.ix[:,0:225]
train_dataY = ldmi.train11.ix[:,225]
test_data = ldmi.test11
test_dataX = ldmi.test11.ix[:,0:225]
test_dataY = ldmi.test11.ix[:,225]


max_feature_range = np.arange(0.05, 0.65, 0.05)
max_depth_range = np.arange(1, 10, 1)


# Split training set into validation folds
cv_index = [ma.ceil((len(train_data)/5)*x) for x in range(6)]

for i in range(5):
    # Split the data
    
    test_cv = train_data.ix[cv_index[i]:cv_index[i+1],:]
    train_cv = train_data.drop(ld.train1.index[cv_index[i]:cv_index[i+1]])

    trainy, testy = train_cv.ix[:,225], test_cv.ix[:,225]
    trainX, testX = train_cv.ix[:,0:225], test_cv.ix[:,0:225]
    
    # Train forest for all CV values and predict on cv_test, save results
    for feat_range in pred_acc1:
        for depth in pred_acc1[0.05]:
            print i, feat_range
            print depth
            rf = RandomForestClassifier(n_estimators=2, max_features = feat_range, max_depth = depth, oob_score = 'false')
            forest_fit = rf.fit(trainX.values,trainy.values)            
            forest_preds = forest_fit.predict(testX)
            forest_preds_proba = forest_fit.predict_proba(testX)[:,1]
            accuracy = np.mean(forest_preds != testy)
            fpr, tpr, _ = roc_curve(testy, forest_preds_proba)
            auc_pt = auc(fpr, tpr)  
            pre, rec, f1, _ = precision_recall_fscore_support(testy, forest_preds, average = 'binary')
            
            pred_acc1[feat_range][depth].append(accuracy)
            auc_vals1[feat_range][depth].append(auc_pt)
            f1_vals1[feat_range][depth].append(f1)
            pre_vals1[feat_range][depth].append(pre)
            rec_vals1[feat_range][depth].append(rec)
            
  

for feat_range in pred_acc1:
    for depth in pred_acc1[0.05]:
        pred_acc_average1[feat_range][depth].append(sum(pred_acc1[feat_range][depth])/5)
        pred_acc_average1[feat_range][depth] = pred_acc_average1[feat_range][depth][0]

        auc_vals_average1[feat_range][depth].append(sum(auc_vals1[feat_range][depth])/5)
        auc_vals_average1[feat_range][depth] = auc_vals_average1[feat_range][depth][0]
        
        f1_vals_average1[feat_range][depth].append(sum(f1_vals1[feat_range][depth])/5)
        f1_vals_average1[feat_range][depth] = f1_vals_average1[feat_range][depth][0]
        
        pre_vals_average1[feat_range][depth].append(sum(pre_vals1[feat_range][depth])/5)
        pre_vals_average1[feat_range][depth] = pre_vals_average1[feat_range][depth][0]
        
        rec_vals_average1[feat_range][depth].append(sum(rec_vals1[feat_range][depth])/5) 
        rec_vals_average1[feat_range][depth] = rec_vals_average1[feat_range][depth][0]




pred_acc_average_df1 = pd.DataFrame(pred_acc_average1)
auc_vals_average_df1 = pd.DataFrame(auc_vals_average1)
f1_vals_average_df1 = pd.DataFrame(f1_vals_average1)
pre_vals_average_df1 = pd.DataFrame(pre_vals_average1)
rec_vals_average_df1 = pd.DataFrame(rec_vals_average1)

    


truevals = np.array(test_data.ix[:,225]) # these the same for all imp sets
# total pos: 254
sum(truevals)
# total neg: 115 => 0.68834 positive in test set 
sum(truevals-1)


# Create random forest classifier, gini index
rf1 = RandomForestClassifier(n_estimators=4000)
forest_fit1 = rf1.fit(train_data.ix[:,0:225],train_data.ix[:,225])

#work out how to match importances to features
importances1 = np.sort(forest_fit1.feature_importances_) #but doesn't tell you which feature is which!
forest_preds1 = forest_fit1.predict(test_data.ix[:,0:225])
forest_acc1 = (forest_preds1 == truevals).sum()/(len(ldmi.test11)*1.0)# why is it different each time I run it? So few trees!
print forest_acc1 #around 0.65

# Create random forest classifier, cross-entropy
sum(ldmi.train11.isnull().any(axis=0))
sum(truevals ==1)/(len(ldmi.test11)*1.0)
# Calculate confusion matrix
confusion_matrix(truevals, forest_preds1, labels=[1, 0])
#array([[237,  17],
#       [ 89,  26]])
#varies depending on forest generated


preds_proba = forest_fit.predict_proba(ldmi.test1.ix[:,0:225])[:,1]

 
# Determine the false positive and true positive rates
fpr, tpr, _ = roc_curve(truevals, preds_proba)
 
# Calculate the AUC
roc_auc = auc(fpr, tpr)
print 'ROC AUC: %0.2f' % roc_auc
 
# Plot of a ROC curve for a specific class
plt.figure()
plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")
plt.show()



############################ 2 ############################

pred_acc2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

f1_vals2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
pre_vals2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
          
rec_vals2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     

pred_acc_average2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals_average2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
f1_vals_average2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}     

pre_vals_average2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

rec_vals_average2 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

train_data = ldmi.train12
train_dataX = ldmi.train12.ix[:,0:225]
train_dataY = ldmi.train12.ix[:,225]
test_data = ldmi.test12
test_dataX = ldmi.test12.ix[:,0:225]
test_dataY = ldmi.test12.ix[:,225]


max_feature_range = np.arange(0.05, 0.65, 0.05)
max_depth_range = np.arange(1, 10, 1)


# Split training set into validation folds
cv_index = [ma.ceil((len(train_data)/5)*x) for x in range(6)]

for i in range(5):
    # Split the data
    
    test_cv = train_data.ix[cv_index[i]:cv_index[i+1],:]
    train_cv = train_data.drop(ld.train1.index[cv_index[i]:cv_index[i+1]])

    trainy, testy = train_cv.ix[:,225], test_cv.ix[:,225]
    trainX, testX = train_cv.ix[:,0:225], test_cv.ix[:,0:225]
    
    # Train forest for all CV values and predict on cv_test, save results
    for feat_range in pred_acc2:
        for depth in pred_acc2[0.05]:
            print i, feat_range
            print depth
            rf = RandomForestClassifier(n_estimators=2, max_features = feat_range, max_depth = depth, oob_score = 'false')
            forest_fit = rf.fit(trainX.values,trainy.values)            
            forest_preds = forest_fit.predict(testX)
            forest_preds_proba = forest_fit.predict_proba(testX)[:,1]
            accuracy = np.mean(forest_preds != testy)
            fpr, tpr, _ = roc_curve(testy, forest_preds_proba)
            auc_pt = auc(fpr, tpr)  
            pre, rec, f1, _ = precision_recall_fscore_support(testy, forest_preds, average = 'binary')
            
            pred_acc2[feat_range][depth].append(accuracy)
            auc_vals2[feat_range][depth].append(auc_pt)
            f1_vals2[feat_range][depth].append(f1)
            pre_vals2[feat_range][depth].append(pre)
            rec_vals2[feat_range][depth].append(rec)
            
  

for feat_range in pred_acc2:
    for depth in pred_acc2[0.05]:
        pred_acc_average2[feat_range][depth].append(sum(pred_acc2[feat_range][depth])/5)
        pred_acc_average2[feat_range][depth] = pred_acc_average2[feat_range][depth][0]

        auc_vals_average2[feat_range][depth].append(sum(auc_vals2[feat_range][depth])/5)
        auc_vals_average2[feat_range][depth] = auc_vals_average2[feat_range][depth][0]
        
        f1_vals_average2[feat_range][depth].append(sum(f1_vals2[feat_range][depth])/5)
        f1_vals_average2[feat_range][depth] = f1_vals_average2[feat_range][depth][0]
        
        pre_vals_average2[feat_range][depth].append(sum(pre_vals2[feat_range][depth])/5)
        pre_vals_average2[feat_range][depth] = pre_vals_average2[feat_range][depth][0]
        
        rec_vals_average2[feat_range][depth].append(sum(rec_vals2[feat_range][depth])/5) 
        rec_vals_average2[feat_range][depth] = rec_vals_average2[feat_range][depth][0]




pred_acc_average_df2 = pd.DataFrame(pred_acc_average2)
auc_vals_average_df2 = pd.DataFrame(auc_vals_average2)
f1_vals_average_df2 = pd.DataFrame(f1_vals_average2)
pre_vals_average_df2 = pd.DataFrame(pre_vals_average2)
rec_vals_average_df2 = pd.DataFrame(rec_vals_average2)



# Create random forest classifier, gini index
rf2 = RandomForestClassifier(n_estimators=1000)
forest_fit2 = rf2.fit(ldmi.train12.ix[:,0:225],ldmi.train12.ix[:,225])

#work out how to match importances to features
importances2 = np.sort(forest_fit2.feature_importances_) #but doesn't tell you which feature is which!
forest_preds2 = forest_fit2.predict(ldmi.test12.ix[:,0:225])
forest_acc2 = (forest_preds2 == truevals).sum()/(len(ldmi.test12)*1.0)# why is it different each time I run it? So few trees!
print forest_acc2 #sometimes as high as 0.718592964824, sometimes 0.65

# Create random forest classifier, cross-entropy
sum(ldmi.train12.isnull().any(axis=0))
sum(truevals ==1)/(len(ldmi.test12)*1.0)
# Calculate confusion matrix
confusion_matrix(truevals, forest_preds2, labels=[1, 0])
#array([[237,  17],
#       [ 89,  26]])
#varies depending on forest generated



############################ 3 ############################

pred_acc3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

f1_vals3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
pre_vals3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
          
rec_vals3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     

pred_acc_average3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals_average3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
f1_vals_average3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}     

pre_vals_average3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

rec_vals_average3 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

train_data = ldmi.train13
train_dataX = ldmi.train13.ix[:,0:225]
train_dataY = ldmi.train13.ix[:,225]
test_data = ldmi.test13
test_dataX = ldmi.test13.ix[:,0:225]
test_dataY = ldmi.test13.ix[:,225]


max_feature_range = np.arange(0.05, 0.65, 0.05)
max_depth_range = np.arange(1, 10, 1)


# Split training set into validation folds
cv_index = [ma.ceil((len(train_data)/5)*x) for x in range(6)]

for i in range(5):
    # Split the data
    
    test_cv = train_data.ix[cv_index[i]:cv_index[i+1],:]
    train_cv = train_data.drop(ld.train1.index[cv_index[i]:cv_index[i+1]])

    trainy, testy = train_cv.ix[:,225], test_cv.ix[:,225]
    trainX, testX = train_cv.ix[:,0:225], test_cv.ix[:,0:225]
    
    # Train forest for all CV values and predict on cv_test, save results
    for feat_range in pred_acc3:
        for depth in pred_acc3[0.05]:
            print i, feat_range
            print depth
            rf = RandomForestClassifier(n_estimators=2, max_features = feat_range, max_depth = depth, oob_score = 'false')
            forest_fit = rf.fit(trainX.values,trainy.values)            
            forest_preds = forest_fit.predict(testX)
            forest_preds_proba = forest_fit.predict_proba(testX)[:,1]
            accuracy = np.mean(forest_preds != testy)
            fpr, tpr, _ = roc_curve(testy, forest_preds_proba)
            auc_pt = auc(fpr, tpr)  
            pre, rec, f1, _ = precision_recall_fscore_support(testy, forest_preds, average = 'binary')
            
            pred_acc3[feat_range][depth].append(accuracy)
            auc_vals3[feat_range][depth].append(auc_pt)
            f1_vals3[feat_range][depth].append(f1)
            pre_vals3[feat_range][depth].append(pre)
            rec_vals3[feat_range][depth].append(rec)
            
  

for feat_range in pred_acc3:
    for depth in pred_acc3[0.05]:
        pred_acc_average3[feat_range][depth].append(sum(pred_acc3[feat_range][depth])/5)
        pred_acc_average3[feat_range][depth] = pred_acc_average3[feat_range][depth][0]

        auc_vals_average3[feat_range][depth].append(sum(auc_vals3[feat_range][depth])/5)
        auc_vals_average3[feat_range][depth] = auc_vals_average3[feat_range][depth][0]
        
        f1_vals_average3[feat_range][depth].append(sum(f1_vals3[feat_range][depth])/5)
        f1_vals_average3[feat_range][depth] = f1_vals_average3[feat_range][depth][0]
        
        pre_vals_average3[feat_range][depth].append(sum(pre_vals3[feat_range][depth])/5)
        pre_vals_average3[feat_range][depth] = pre_vals_average3[feat_range][depth][0]
        
        rec_vals_average3[feat_range][depth].append(sum(rec_vals3[feat_range][depth])/5) 
        rec_vals_average3[feat_range][depth] = rec_vals_average3[feat_range][depth][0]




pred_acc_average_df3 = pd.DataFrame(pred_acc_average3)
auc_vals_average_df3 = pd.DataFrame(auc_vals_average3)
f1_vals_average_df3 = pd.DataFrame(f1_vals_average3)
pre_vals_average_df3 = pd.DataFrame(pre_vals_average3)
rec_vals_average_df3 = pd.DataFrame(rec_vals_average3)


# Create random forest classifier, gini index
rf3 = RandomForestClassifier(n_estimators=1000)
forest_fit3 = rf3.fit(ldmi.train13.ix[:,0:225],ldmi.train13.ix[:,225])

#work out how to match importances to features
importances3 = np.sort(forest_fit3.feature_importances_) #but doesn't tell you which feature is which!
forest_preds3 = forest_fit3.predict(ldmi.test13.ix[:,0:225])
forest_acc3 = (forest_preds3 == truevals).sum()/(len(ldmi.test13)*1.0)# why is it different each time I run it? So few trees!
print forest_acc3 #sometimes as high as 0.718592964824, sometimes 0.65

# Create random forest classifier, cross-entropy
sum(ldmi.train13.isnull().any(axis=0))
sum(truevals ==1)/(len(ldmi.test13)*1.0)
# Calculate confusion matrix
confusion_matrix(truevals, forest_preds3, labels=[1, 0])
#array([[237,  17],
#       [ 89,  26]])
#varies depending on forest generated




############################ 4 ############################

pred_acc4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

f1_vals4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
pre_vals4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
          
rec_vals4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     

pred_acc_average4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals_average4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
f1_vals_average4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}     

pre_vals_average4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

rec_vals_average4 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

train_data = ldmi.train14
train_dataX = ldmi.train14.ix[:,0:225]
train_dataY = ldmi.train14.ix[:,225]
test_data = ldmi.test14
test_dataX = ldmi.test14.ix[:,0:225]
test_dataY = ldmi.test14.ix[:,225]


max_feature_range = np.arange(0.05, 0.65, 0.05)
max_depth_range = np.arange(1, 10, 1)


# Split training set into validation folds
cv_index = [ma.ceil((len(train_data)/5)*x) for x in range(6)]

for i in range(5):
    # Split the data
    
    test_cv = train_data.ix[cv_index[i]:cv_index[i+1],:]
    train_cv = train_data.drop(ld.train1.index[cv_index[i]:cv_index[i+1]])

    trainy, testy = train_cv.ix[:,225], test_cv.ix[:,225]
    trainX, testX = train_cv.ix[:,0:225], test_cv.ix[:,0:225]
    
    # Train forest for all CV values and predict on cv_test, save results
    for feat_range in pred_acc4:
        for depth in pred_acc4[0.05]:
            print i, feat_range
            print depth
            rf = RandomForestClassifier(n_estimators=2, max_features = feat_range, max_depth = depth, oob_score = 'false')
            forest_fit = rf.fit(trainX.values,trainy.values)            
            forest_preds = forest_fit.predict(testX)
            forest_preds_proba = forest_fit.predict_proba(testX)[:,1]
            accuracy = np.mean(forest_preds != testy)
            fpr, tpr, _ = roc_curve(testy, forest_preds_proba)
            auc_pt = auc(fpr, tpr)  
            pre, rec, f1, _ = precision_recall_fscore_support(testy, forest_preds, average = 'binary')
            
            pred_acc4[feat_range][depth].append(accuracy)
            auc_vals4[feat_range][depth].append(auc_pt)
            f1_vals4[feat_range][depth].append(f1)
            pre_vals4[feat_range][depth].append(pre)
            rec_vals4[feat_range][depth].append(rec)
            
  

for feat_range in pred_acc4:
    for depth in pred_acc4[0.05]:
        pred_acc_average4[feat_range][depth].append(sum(pred_acc4[feat_range][depth])/5)
        pred_acc_average4[feat_range][depth] = pred_acc_average4[feat_range][depth][0]

        auc_vals_average4[feat_range][depth].append(sum(auc_vals4[feat_range][depth])/5)
        auc_vals_average4[feat_range][depth] = auc_vals_average4[feat_range][depth][0]
        
        f1_vals_average4[feat_range][depth].append(sum(f1_vals4[feat_range][depth])/5)
        f1_vals_average4[feat_range][depth] = f1_vals_average4[feat_range][depth][0]
        
        pre_vals_average4[feat_range][depth].append(sum(pre_vals4[feat_range][depth])/5)
        pre_vals_average4[feat_range][depth] = pre_vals_average4[feat_range][depth][0]
        
        rec_vals_average4[feat_range][depth].append(sum(rec_vals4[feat_range][depth])/5) 
        rec_vals_average4[feat_range][depth] = rec_vals_average4[feat_range][depth][0]




pred_acc_average_df4 = pd.DataFrame(pred_acc_average4)
auc_vals_average_df4 = pd.DataFrame(auc_vals_average4)
f1_vals_average_df4 = pd.DataFrame(f1_vals_average4)
pre_vals_average_df4 = pd.DataFrame(pre_vals_average4)
rec_vals_average_df4 = pd.DataFrame(rec_vals_average4)


# Create random forest classifier, gini index
rf4 = RandomForestClassifier(n_estimators=1000)
forest_fit4 = rf1.fit(ldmi.train14.ix[:,0:225],ldmi.train14.ix[:,225])

#work out how to match importances to features
importances4 = np.sort(forest_fit4.feature_importances_) #but doesn't tell you which feature is which!
forest_preds4 = forest_fit4.predict(ldmi.test14.ix[:,0:225])
forest_acc4 = (forest_preds4 == truevals).sum()/(len(ldmi.test14)*1.0)# why is it different each time I run it? So few trees!
print forest_acc4 #sometimes as high as 0.718592964824, sometimes 0.65

# Create random forest classifier, cross-entropy
sum(ldmi.train14.isnull().any(axis=0))
sum(truevals ==1)/(len(ldmi.test14)*1.0)
# Calculate confusion matrix
confusion_matrix(truevals, forest_preds4, labels=[1, 0])
#array([[237,  17],
#       [ 89,  26]])
#varies depending on forest generated




############################ 5 ############################

pred_acc5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

f1_vals5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
pre_vals5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
          
rec_vals5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     

pred_acc_average5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

auc_vals_average5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}
     
f1_vals_average5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}     

pre_vals_average5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

rec_vals_average5 = {0.05: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.1: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.15: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.2: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.25: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.3: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.35: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.4: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.45: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.5: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.55: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []},
     0.6: {1: [], 2: [], 3: [], 4: [], 5: [], 6: [], 7: [], 8: [], 9: []}}

train_data = ldmi.train15
train_dataX = ldmi.train15.ix[:,0:225]
train_dataY = ldmi.train15.ix[:,225]
test_data = ldmi.test15
test_dataX = ldmi.test15.ix[:,0:225]
test_dataY = ldmi.test15.ix[:,225]


max_feature_range = np.arange(0.05, 0.65, 0.05)
max_depth_range = np.arange(1, 10, 1)


# Split training set into validation folds
cv_index = [ma.ceil((len(train_data)/5)*x) for x in range(6)]

for i in range(5):
    # Split the data
    
    test_cv = train_data.ix[cv_index[i]:cv_index[i+1],:]
    train_cv = train_data.drop(ld.train1.index[cv_index[i]:cv_index[i+1]])

    trainy, testy = train_cv.ix[:,225], test_cv.ix[:,225]
    trainX, testX = train_cv.ix[:,0:225], test_cv.ix[:,0:225]
    
    # Train forest for all CV values and predict on cv_test, save results
    for feat_range in pred_acc5:
        for depth in pred_acc5[0.05]:
            print i, feat_range
            print depth
            rf = RandomForestClassifier(n_estimators=2, max_features = feat_range, max_depth = depth, oob_score = 'false')
            forest_fit = rf.fit(trainX.values,trainy.values)            
            forest_preds = forest_fit.predict(testX)
            forest_preds_proba = forest_fit.predict_proba(testX)[:,1]
            accuracy = np.mean(forest_preds != testy)
            fpr, tpr, _ = roc_curve(testy, forest_preds_proba)
            auc_pt = auc(fpr, tpr)  
            pre, rec, f1, _ = precision_recall_fscore_support(testy, forest_preds, average = 'binary')
            
            pred_acc5[feat_range][depth].append(accuracy)
            auc_vals5[feat_range][depth].append(auc_pt)
            f1_vals5[feat_range][depth].append(f1)
            pre_vals5[feat_range][depth].append(pre)
            rec_vals5[feat_range][depth].append(rec)
            
  

for feat_range in pred_acc5:
    for depth in pred_acc5[0.05]:
        pred_acc_average5[feat_range][depth].append(sum(pred_acc5[feat_range][depth])/5)
        pred_acc_average5[feat_range][depth] = pred_acc_average5[feat_range][depth][0]

        auc_vals_average5[feat_range][depth].append(sum(auc_vals5[feat_range][depth])/5)
        auc_vals_average5[feat_range][depth] = auc_vals_average5[feat_range][depth][0]
        
        f1_vals_average5[feat_range][depth].append(sum(f1_vals5[feat_range][depth])/5)
        f1_vals_average5[feat_range][depth] = f1_vals_average5[feat_range][depth][0]
        
        pre_vals_average5[feat_range][depth].append(sum(pre_vals5[feat_range][depth])/5)
        pre_vals_average5[feat_range][depth] = pre_vals_average5[feat_range][depth][0]
        
        rec_vals_average5[feat_range][depth].append(sum(rec_vals5[feat_range][depth])/5) 
        rec_vals_average5[feat_range][depth] = rec_vals_average5[feat_range][depth][0]




pred_acc_average_df5 = pd.DataFrame(pred_acc_average5)
auc_vals_average_df5 = pd.DataFrame(auc_vals_average5)
f1_vals_average_df5 = pd.DataFrame(f1_vals_average5)
pre_vals_average_df5 = pd.DataFrame(pre_vals_average5)
rec_vals_average_df5 = pd.DataFrame(rec_vals_average5)


# Create random forest classifier, gini index
rf5 = RandomForestClassifier(n_estimators=1000)
forest_fit5 = rf1.fit(ldmi.train15.ix[:,0:225],ldmi.train15.ix[:,225])

#work out how to match importances to features
importances5 = np.sort(forest_fit5.feature_importances_) #but doesn't tell you which feature is which!
forest_preds5 = forest_fit5.predict(ldmi.test15.ix[:,0:225])
forest_acc5 = (forest_preds5 == truevals).sum()/(len(ldmi.test15)*1.0)# why is it different each time I run it? So few trees!
print forest_acc5 #sometimes as high as 0.718592964824, sometimes 0.65

# Create random forest classifier, cross-entropy
sum(ldmi.train15.isnull().any(axis=0))
sum(truevals ==1)/(len(ldmi.test15)*1.0)
# Calculate confusion matrix
confusion_matrix(truevals, forest_preds5, labels=[1, 0])
#array([[237,  17],
#       [ 89,  26]])
#varies depending on forest generated


################## Average prediction ##################

plt.figure(figsize=(10, 8))
my_xticks = ['5%', '10%', '15%', '20%','25%', '30%', '35%', '40%','45%', '50%', '55%', '60%', '65%']
plt.xticks(range(0,len(max_feature_range)), my_xticks)
plt.yticks(np.arange(0.27, 0.34, 0.01))
plt.plot(pred_acc_average_df.ix[1,:], label='depth 1')
plt.plot(pred_acc_average_df.ix[2,:], label='depth 2')
plt.plot(pred_acc_average_df.ix[3,:], label='depth 3')
plt.plot(pred_acc_average_df.ix[4,:], label='depth 4')
plt.plot(pred_acc_average_df.ix[5,:], label='depth 5')
plt.plot(pred_acc_average_df.ix[6,:], label='depth 6')
plt.plot(pred_acc_average_df.ix[7,:], label='depth 7')
plt.plot(pred_acc_average_df.ix[8,:], label='depth 8')
plt.plot(pred_acc_average_df.ix[9,:], label='depth 9')
#plt.xlim([0.0, 12])
plt.ylim([0.27, 0.34])
plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
plt.grid(b=True, which='minor', color='lightgrey', linestyle='-')
plt.xlabel('% of features')
plt.ylabel('Accuracy')
plt.title('Prediction missclassification rate over varying tree depths and percentage of variables per tree')
plt.legend(loc="lower left")
plt.show()




plt.figure(figsize=(10, 8))
my_xticks = ['5%', '10%', '15%', '20%','25%', '30%', '35%', '40%','45%', '50%', '55%', '60%', '65%']
plt.xticks(range(0,len(max_feature_range)), my_xticks)
plt.yticks(np.arange(0.60, 0.65, 0.005))
plt.plot(auc_vals_average_df.ix[1,:], label='depth 1')
plt.plot(auc_vals_average_df.ix[2,:], label='depth 2')
plt.plot(auc_vals_average_df.ix[3,:], label='depth 3')
plt.plot(auc_vals_average_df.ix[4,:], label='depth 4')
plt.plot(auc_vals_average_df.ix[5,:], label='depth 5')
plt.plot(auc_vals_average_df.ix[6,:], label='depth 6')
plt.plot(auc_vals_average_df.ix[7,:], label='depth 7')
plt.plot(auc_vals_average_df.ix[8,:], label='depth 8')
plt.plot(auc_vals_average_df.ix[9,:], label='depth 9')
#plt.xlim([0.0, 12])
#plt.ylim([0.6, 0.65])
plt.grid(b=True, which='major', color='lightgrey', linestyle='-')
plt.grid(b=True, which='minor', color='lightgrey', linestyle='-')
plt.xlabel('% of features')
plt.ylabel('Accuracy')
plt.title('Prediction auc over varying tree depths and percentage of variables per tree')
plt.legend(loc="lower right")
plt.show()




pred_probs = (forest_preds1 + forest_preds2 + forest_preds3 + forest_preds4 + forest_preds5)/5.0

pred_av = (pred_probs >0.5 ).astype(int)

confusion_matrix(truevals, pred_av, labels=[1, 0])
forest_av_acc = (pred_av == truevals).sum()/(len(ldmi.test14)*1.0)
print forest_av_acc 
print roc_auc_score(truevals, pred_av)
#0.563334474495

inv = (pred_probs < 1)
pred_av_cheap = np.asarray([not i for i in inv]).astype(int)

forest_cheap_acc = (pred_av_cheap == truevals).sum()/(len(ldmi.test14)*1.0)
print forest_av_acc 
print roc_auc_score(truevals, pred_av_cheap)